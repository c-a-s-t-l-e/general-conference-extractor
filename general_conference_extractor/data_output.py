# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_Data_Output.ipynb.

# %% auto 0
__all__ = ['save_talk_text', 'save_metadata_to_csv', 'extract_conference_talks']

# %% ../nbs/02_Data_Output.ipynb 3
import os
def save_talk_text(output_folder, talk):
    """Saves the text of a talk to a file."""
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)
    
    filename = f"{talk.metadata.get('title', 'unknown_title').replace(' ', '_')}.txt"
    file_path = os.path.join(output_folder, filename)
    with open(file_path, 'w', encoding='utf-8') as file:
        file.write(talk.text)
        
    # Update metadata with the filename for reference
    talk.metadata['filename'] = filename
    return talk.metadata

# %% ../nbs/02_Data_Output.ipynb 4
import csv
def save_metadata_to_csv(metadata_records, metadata_csv_path):
    """Saves metadata records to a CSV file."""
    with open(metadata_csv_path, 'w', newline='', encoding='utf-8') as csvfile:
        fieldnames = ['title', 'author', 'calling', 'month', 'year', 'url', 'filename']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        for record in metadata_records:
            writer.writerow(record)

# %% ../nbs/02_Data_Output.ipynb 5
from .GeneralConferenceTalk import GeneralConferenceTalk

def extract_conference_talks(urls, output_folder, metadata_csv_path):
    metadata_records = []
    for url in urls:
        talk = GeneralConferenceTalk(url, title=True, author=True, calling=True)
        talk_metadata = save_talk_text(output_folder, talk)
        metadata_records.append(talk_metadata)
    
    save_metadata_to_csv(metadata_records, metadata_csv_path)
